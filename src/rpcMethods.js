const geth = [
  { method: 'web3_clientVersion' },
  { method: 'web3_sha3', exampleParams: '["0x68656c6c6f20776f726c64"]' },
  { method: 'net_version' },
  { method: 'net_peerCount' },
  { method: 'net_listening' },
  { method: 'eth_protocolVersion' },
  { method: 'eth_syncing' },
  { method: 'eth_coinbase' },
  { method: 'eth_mining' },
  { method: 'eth_hashrate' },
  { method: 'eth_gasPrice' },
  { method: 'eth_accounts' },
  { method: 'eth_blockNumber' },
  {
    method: 'eth_getBalance',
    exampleParams: '["0xc94770007dda54cF92009BFF0dE90c06F603a09f", "latest"]'
  },
  {
    method: 'eth_getStorageAt',
    exampleParams:
      '["0x295a70b2de5e3953354a6a8344e616ed314d7251", "0x6661e9d6d8b923d5bbaab1b96e1dd51ff6ea2a93520fdc9eb75d059238b8c5e9", "latest"]'
  },
  {
    method: 'eth_getTransactionCount',
    exampleParams: '["0xc94770007dda54cF92009BFF0dE90c06F603a09f", "latest"]'
  },
  {
    method: 'eth_getBlockTransactionCountByHash',
    exampleParams:
      '["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"]'
  },
  { method: 'eth_getBlockTransactionCountByNumber', exampleParams: '["0xe8"]' },
  { method: 'eth_getUncleCountByBlockHash' },
  { method: 'eth_getUncleCountByBlockNumber' },
  { method: 'eth_getCode' },
  { method: 'eth_sign' },
  { method: 'eth_sendTransaction' },
  { method: 'eth_sendRawTransaction' },
  { method: 'eth_call' },
  { method: 'eth_estimateGas' },
  { method: 'eth_getBlockByHash' },
  { method: 'eth_getBlockByNumber' },
  { method: 'eth_getTransactionByHash' },
  { method: 'eth_getTransactionByBlockHashAndIndex' },
  { method: 'eth_getTransactionByBlockNumberAndIndex' },
  { method: 'eth_getTransactionReceipt' },
  { method: 'eth_pendingTransactions' },
  { method: 'eth_getUncleByBlockHashAndIndex' },
  { method: 'eth_getUncleByBlockNumberAndIndex' },
  { method: 'eth_getCompilers' },
  { method: 'eth_compileLLL' },
  { method: 'eth_compileSolidity' },
  { method: 'eth_compileSerpent' },
  { method: 'eth_newFilter' },
  { method: 'eth_newBlockFilter' },
  { method: 'eth_newPendingTransactionFilter' },
  { method: 'eth_uninstallFilter' },
  { method: 'eth_getFilterChanges' },
  { method: 'eth_getFilterLogs' },
  { method: 'eth_getLogs' },
  { method: 'eth_getWork' },
  { method: 'eth_submitWork' },
  { method: 'eth_submitHashrate' },
  { method: 'eth_getProof' },
  { method: 'db_putString' },
  { method: 'db_getString' },
  { method: 'db_putHex' },
  { method: 'db_getHex' },
  { method: 'shh_post' },
  { method: 'shh_version' },
  { method: 'shh_newIdentity' },
  { method: 'shh_hasIdentity' },
  { method: 'shh_newGroup' },
  { method: 'shh_addToGroup' },
  { method: 'shh_newFilter' },
  { method: 'shh_uninstallFilter' },
  { method: 'shh_getFilterChanges' },
  { method: 'shh_getMessages' }
];

const parity = [
  { method: 'parity_allTransactionHashes' },
  { method: 'parity_allTransactions' },
  { method: 'parity_call' },
  { method: 'parity_cidV0' },
  { method: 'parity_composeTransaction' },
  { method: 'parity_consensusCapability' },
  { method: 'parity_decryptMessage' },
  { method: 'parity_encryptMessage' },
  { method: 'parity_futureTransactions' },
  { method: 'parity_getBlockHeaderByNumber' },
  { method: 'parity_getBlockReceipts' },
  { method: 'parity_hardwarePinMatrixAck' },
  { method: 'parity_listOpenedVaults' },
  { method: 'parity_listStorageKeys' },
  { method: 'parity_listVaults' },
  { method: 'parity_localTransactions' },
  { method: 'parity_lockedHardwareAccountsInfo' },
  { method: 'parity_releasesInfo' },
  { method: 'parity_signMessage' },
  { method: 'parity_submitWorkDetail' },
  { method: 'parity_verifySignature' },
  { method: 'parity_versionInfo' },
  { method: 'parity_changeVault' },
  { method: 'parity_changeVaultPassword' },
  { method: 'parity_closeVault' },
  { method: 'parity_getVaultMeta' },
  { method: 'parity_newVault' },
  { method: 'parity_openVault' },
  { method: 'parity_setVaultMeta' },
  { method: 'parity_accountsInfo' },
  { method: 'parity_checkRequest' },
  { method: 'parity_defaultAccount' },
  { method: 'parity_generateSecretPhrase' },
  { method: 'parity_hardwareAccountsInfo' },
  { method: 'parity_listAccounts' },
  { method: 'parity_phraseToAddress' },
  { method: 'parity_postSign' },
  { method: 'parity_postTransaction' },
  { method: 'parity_defaultExtraData' },
  { method: 'parity_extraData' },
  { method: 'parity_gasCeilTarget' },
  { method: 'parity_gasFloorTarget' },
  { method: 'parity_minGasPrice' },
  { method: 'parity_transactionsLimit' },
  { method: 'parity_devLogs' },
  { method: 'parity_devLogsLevels' },
  { method: 'parity_chain' },
  { method: 'parity_chainStatus' },
  { method: 'parity_gasPriceHistogram' },
  { method: 'parity_netChain' },
  { method: 'parity_netPeers' },
  { method: 'parity_netPort' },
  { method: 'parity_nextNonce' },
  { method: 'parity_pendingTransactions' },
  { method: 'parity_pendingTransactionsStats' },
  { method: 'parity_registryAddress' },
  { method: 'parity_removeTransaction' },
  { method: 'parity_rpcSettings' },
  { method: 'parity_unsignedTransactionsCount' },
  { method: 'parity_enode' },
  { method: 'parity_mode' },
  { method: 'parity_nodeKind' },
  { method: 'parity_nodeName' },
  { method: 'parity_wsUrl' }
];

export default {
  geth,
  parity
};
